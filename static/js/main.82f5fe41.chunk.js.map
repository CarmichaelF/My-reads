{"version":3,"sources":["BooksAPI.js","Components/Book.js","Components/Shelf.js","Components/Library.js","Components/Search.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","Book","choose","book","this","props","updateBookShelf","console","log","concat","_this","react_default","a","createElement","className","src","alt","type","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","moveTo","title","author","shelf","Component","Shelf","authors","length","map","books","cmpBooks","Array","isArray","element","undefined","imageLinks","Components_Book","updateBook","key","thumbnail","treatAuthor","Library","_ref","Components_Shelf","filter","Link","to","Search","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchedBooks","terms","query","_this2","fetch","method","objectSpread","Content-Type","body","JSON","stringify","then","res","json","data","result","setState","catch","e","booksWithShelf","booksFound","find","myBook","_this3","onChange","event","searchBook","target","value","placeholder","aria-label","aria-describedby","App","bind","assertThisInitialized","bookId","getAllBooks","BooksAPI","setShelf","_this4","Route","exact","path","render","Components_Library","Components_Search","ReactDOM","BrowserRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.82f5fe41.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\"\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react';\r\n\r\nclass Book extends Component {\r\n\r\n  //Used to call the API method and update the Shelf.\r\n  moveTo(choose){\r\n    const book = this.props;\r\n    switch(choose){\r\n        case 'C':\r\n            this.props.updateBookShelf(book, 'currentlyReading');\r\n        break;\r\n        case 'W':\r\n            this.props.updateBookShelf(book, 'wantToRead');\r\n        break;\r\n        case 'R':\r\n            this.props.updateBookShelf(book, 'read');\r\n        break;\r\n        case 'N':\r\n            this.props.updateBookShelf(book, 'none');\r\n            break;\r\n        default:\r\n        console.log(`${choose} isn't a valid argument!`);\r\n    }\r\n  }\r\n\r\n  //Load the basic HTML of the book.\r\n  render() {\r\n    return (\r\n        <div className = \"book\">\r\n        <div>\r\n            <img src = {this.props.src}  className = \"card-img-top shadow\" alt=\"book\"></img>\r\n            <div className=\"dropdown\">\r\n                <button className=\"btn btn-secondary dropdown-toggle shadow\" type=\"button\" id=\"dropdownMenu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                </button>\r\n            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu\">\r\n                <button onClick = {() => this.moveTo('C')} className=\"dropdown-item\" type=\"button\">Currently Reading</button>\r\n                <button onClick = {() => this.moveTo('W')} className=\"dropdown-item\" type=\"button\">Want to Read</button>\r\n                <button onClick = {() => this.moveTo('R')} className=\"dropdown-item\" type=\"button\">Read</button>\r\n                <button onClick = {() => this.moveTo('N')} className=\"dropdown-item\" type=\"button\">None</button>\r\n            </div>\r\n        </div>\r\n\r\n        </div>\r\n            <div className = \"card-body\">\r\n                <h5 className = \"card-title\">{this.props.title}</h5>\r\n                <p className = \"card-text\">{this.props.author}</p>\r\n                <p>Shelf: {this.props.shelf ? this.props.shelf : \"none\"}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Book;\r\n","/* eslint-disable no-unused-expressions */\r\nimport React, { Component } from 'react';\r\nimport Book from './Book';\r\n\r\nclass Shelf extends Component {\r\n\r\n  //Treat the array of authors from the API.\r\n  treatAuthor(authors){\r\n    if(authors){\r\n      if(authors.length > 1){\r\n        return authors.map((author) => author + ' ');\r\n      }\r\n    }\r\n    return authors;\r\n  }\r\n\r\n  //Map through all the components calling the Book\r\n  //Component and pass the correct Props.\r\n  render() {\r\n    const books = this.props.books;\r\n    const cmpBooks = books && Array.isArray(books)\r\n    ? books.map((element) =>\r\n        element !== undefined && element.imageLinks && element.authors ?\r\n        <Book \r\n        updateBookShelf = {this.props.updateBook} \r\n        title = {element.title}\r\n        key = {element.id} \r\n        src = {element.imageLinks.thumbnail}\r\n        author = {this.treatAuthor(element.authors)}\r\n        id = {element.id}\r\n        shelf = {element.shelf} />:null\r\n    ) :null ;\r\n    return (\r\n      <div className = \"container\">\r\n        <div>\r\n          <h2 className = \"shelf-title pt-4 pb-4\">{this.props.title}</h2>\r\n          <div className = \"d-flex flex-wrap justify-content-around text-center m-5\">\r\n          {cmpBooks}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Shelf;\r\n","import React from 'react';\r\nimport Shelf from './Shelf';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Library({books, updateBookShelf}){\r\n  //Use the Shelf Component to load the HTML needed.\r\n    return <div>\r\n      <header><h1>Welcome to MyReads!</h1></header>  \r\n        <Shelf \r\n        updateBook = {updateBookShelf} \r\n        title = \"Currently Reading\" \r\n        books = {books ? books.filter((element) => element.shelf === \"currentlyReading\"):null} />\r\n        <Shelf \r\n        updateBook = {updateBookShelf} \r\n        title = \"Want to Read\" \r\n        books = {books ? books.filter((element) => element.shelf === \"wantToRead\"):null} />\r\n        <Shelf \r\n        updateBook = {updateBookShelf} \r\n        title = \"Read\" \r\n        books = {books ? books.filter((element) => element.shelf === \"read\"):null} />\r\n        <Link className = \"btn-search\" to = '/search'><i className = \"fas fa-search\"></i></Link>\r\n    </div>\r\n}\r\n\r\nexport default Library;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as BooksAPI from '../BooksAPI';\r\nimport Shelf from './Shelf';\r\n\r\nclass Search extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      searchedBooks: null\r\n    };\r\n  }\r\n\r\n  //Use the search method from the API to set the state of the component.\r\n  searchBook(terms){\r\n    BooksAPI.search(terms).then((result) =>{\r\n      if(result){\r\n        this.setState({searchedBooks: this.filter(result)});\r\n      }\r\n    }).catch((e) =>{\r\n      console.log(\"Error\", e);\r\n    });\r\n  }\r\n\r\n  filter(books){\r\n    const booksWithShelf = this.props.books\r\n      return books.map((book) => {\r\n        const booksFound = booksWithShelf.find(myBook => myBook.id === book.id);\r\n        book.shelf = booksFound ? booksFound.shelf : 'none'\r\n        return book;\r\n    })\r\n  }\r\n\r\n  render() {\r\n    //Render the first HTML of the Search page.\r\n    return <div>\r\n    <div className=\"input-group input-group-lg\">\r\n    <div className=\"input-group-prepend\">\r\n    <Link className=\"input-group-text\" to = '/'><i className =\"fas fa-arrow-left\"></i></Link>\r\n    </div>\r\n    <input\r\n      onChange = {(event) => this.searchBook(event.target.value)}\r\n      placeholder = \"Search for a title or an Author...\"\r\n      type=\"text\"\r\n      className=\"form-control\"\r\n      aria-label=\"Search for a title or an Author\"\r\n      aria-describedby=\"inputGroup-sizing-lg\">\r\n    </input>\r\n    \r\n    </div>\r\n    <Shelf\r\n      updateBook = {this.props.updateBookShelf} \r\n      title = \"Results\" \r\n      books = {this.state.searchedBooks} />\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport * as BooksAPI from './BooksAPI'\nimport Library from './Components/Library';\nimport Search from './Components/Search';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.updateBookShelf = this.updateBookShelf.bind(this);\n    this.state = { books: null };\n  }\n  //Receive an array of books and an id that is used to filter the data from API.\n  setShelf(books, id){\n    let booksFiltered = books;\n    if(books !== null){\n      booksFiltered.shelf = books.filter((element) =>{\n        return element.shelf && element.id !== id;\n      });\n    }\n    this.setState({books});\n  }\n\n  //It's used to update the Shelf based on the API method.\n  updateBookShelf(bookId, shelf){\n    if(shelf === 'none'){\n      this.getAllBooks(bookId);\n    }\n    BooksAPI.update(bookId, shelf)\n    .then(() =>{\n      this.getAllBooks();\n    })\n    .catch((e) =>{\n      console.log(\"Error\", e);\n    });\n  }\n\n  //Get all the data from the API and set the state.\n  getAllBooks(bookId){\n    BooksAPI.getAll().then(result => \n      this.setShelf(result, bookId))\n    .catch((e) =>{\n      console.log(\"Error\", e);\n    });\n  }\n\n  //When the component mount the data will be called\n  componentDidMount() {\n    this.getAllBooks();\n  }\n\n  render() {\n    //It'll render the Library Component if the path match with '/'.\n    return (\n      <div>  \n        <Route exact path = '/' render = {() => (\n          <Library\n          updateBookShelf = {this.updateBookShelf} \n          books = {this.state.books} />\n      )}></Route>\n          <Route path = '/search' render = {() => (\n            <Search \n            updateBookShelf = {this.updateBookShelf}\n            books = {this.state.books} />\n      )}/>\n      </div>\n      );\n    //It'll render the Search Component if the path match with '/search'.\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\n\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}